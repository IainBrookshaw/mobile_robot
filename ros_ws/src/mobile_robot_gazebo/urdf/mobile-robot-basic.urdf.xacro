<?xml version="1.0"?>
<!--
    Mobile Robot: Basic URDF and XACRO Definition
    Iain Brookshaw
    Copyright (c), 2019. All Rights Reserved
    MIT License

    This should work with both Gazebo and RViz
    see https://github.com/ros/urdf_sim_tutorial/blob/master/urdf/13-diffdrive.urdf.xacro
    for a base example
-->

<robot name="mobile_robot_basic" xmlns:xacro="http://ros.org/wiki/xacro">

    <!--
        Define some Constants
    -->

    <!-- Chassis Constants -->
    <xacro:property name="chassis_height"        value="0.1"     />
    <xacro:property name="chassis_center"        value="0 0 0.3" />
    <xacro:property name="chassis_mass"          value="1.0"     />

    <!-- Drive Wheel Constants -->
    <xacro:property name="wheel_base"            value="0.2"  />
    <xacro:property name="wheel_diameter"        value="0.07" />
    <xacro:property name="wheel_thickness"       value="0.01" />
    <xacro:property name="wheel_mass"            value="0.01" />

    <!-- castor wheel constants -->
    <xacro:property name="castor_wheel_diameter" value="0.05" />
    <xacro:property name="castor_wheel_center"   value="-0.1 0 0.025" />

    <!--
        Define a macro to compute the default inertial value for an object
    -->
    <xacro:macro name="default_inertial" params="mass">
        <inertial>
            <mass value="${mass}" />
            <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0" />
        </inertial>
    </xacro:macro>

    <!--
        Robot Chassis Link
    -->
    <link name="chassis">
        <visual>
            <geometry>
                <cylinder radius="${wheel_base}" length="${chassis_height}"/>
                <origin xyz="${chassis_center}" />
            </geometry>
        </visual>
        <collision>
            <geometry>
                <cylinder radius="${wheel_base}" length="${chassis_height}"/>
                <origin xyz="${chassis_center}" />
            </geometry>
        </collision>

        <xacro:default_inertial mass="${chassis_mass}"/>

        <!-- TODO: GAZEBO PLUGIN FOR SENSORS GOES HERE -->
    </link>

    <!--
        Castor Wheel Link and Joint
    -->
    <link name="castor_wheel">
        <visual>
            <origin xyz="${castor_wheel_center}" />
            <geometry>
                <sphere radius="${castor_wheel_diameter/2.0}" />
            </geometry>
        </visual>

        <collision>
            <origin xyz="${castor_wheel_center}" />
            <geometry>
                <sphere radius="${castor_wheel_diameter/2.0}" />
            </geometry>
        </collision>
    </link>
    <joint name="castor_joint" type="fixed">
        <parent link="chassis"      />
        <child  link="castor_wheel" />
        <origin xyz="0 0 -${castor_wheel_diameter/2.0}" rpy="0 0 0"/>
    </joint>


    <!--
        Drive Wheel Links and Joints

        These are defined as an XACRO macro to make them duplicates
        mirror using the 'reflect' param: 1 is one side -1 the other
    -->
    <xacro:macro name="wheel" params="prefix reflect">

        <link name="${prefix}_wheel">
            <visual>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
                <geometry>
                    <cylinder radius="${wheel_diameter/2.0}" length="${wheel_thickness}"/>
                </geometry>
            </visual>

            <collision>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
                <geometry>
                    <cylinder radius="${wheel_diameter/2}" length="${wheel_thickness}"/>
                </geometry>
            </collision>
    
            <xacro:default_inertial mass="${wheel_mass}"/>
        </link>
        <joint name="${prefix}_wheel_joint" type="continuous" >
            <axis xyz="0 1 0" rpy="0 0 0" />
            <parent link="chassis" />
            <child link="${prefix}_wheel"/>
            <origin xyz="0 ${wheel_base*reflect/2.0} -${wheel_diameter/2+.05}" rpy="0 0 0"/>
        </joint>

        <!-- This block provides the simulator (Gazebo) with information on a few additional
        physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
        <gazebo reference="${prefix}_wheel">
            <mu1 value="200.0"/>
            <mu2 value="100.0"/>
            <kp value="10000000.0" />
            <kd value="1.0" />
        </gazebo>

        <!-- TODO: WHEEL PLUGIN FOR MOTOR GOES HERE -->
    </xacro:macro>

    <!--
        Run the wheel macros to create the left and right wheels
    -->
    <xacro:wheel prefix="left"  reflect="-1" />
    <xacro:wheel prefix="right" reflect="1"  />

</robot>